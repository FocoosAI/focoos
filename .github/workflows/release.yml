name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  release:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4


      - name: Get next version without tagging
        id: get_next_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true

      # Step 2: Aggiornare pyproject.toml con la nuova versione
      - name: Update pyproject.toml with new version
        run: |
          sed -i 's/version = ".*"/version = "${{ steps.get_next_version.outputs.new_version }}"/' pyproject.toml

      # Step 3: Fare commit della modifica
      - name: Commit updated pyproject.toml
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "[bot]: update version to ${{ steps.get_next_version.outputs.new_version }}"
          file_pattern: pyproject.toml
      # Step 4: Attendere che il commit sia sincronizzato su GitHub
      - name: Wait for commit sync
        run: sleep 10
      - uses: actions/checkout@v4
      # Step 5: Creare e taggare la nuova versione
      - name: Tag version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: false
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          generateReleaseNotes: true
